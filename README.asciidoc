Nexus
-----

_Generators for Vim_

Default Generator
~~~~~~~~~~~~~~~~~

By default, Nexus comes with a linear numeric generator and two global
objects which use it:

* +s0+
* +s1+

The +s1+ object has a method called +next()+ which returns the next number in the
series. As the name implies, the first such number is 1. There is a
corresponding +s0+ object whose first call to +next()+ yields, of course, the
number 0. Users are free to create their own objects from the default
numeric generator too:

  :let even_seq = Series(2)

The command:

  :echo even_seq.next()

will print 2 on the first call, then 4, then 6, 8, 10, etc, on subsequent calls.

The Series constructor has the following signatures:

* +Series()+ -> starting at 0 with an increment of 1 -> 1, 2, 3, 4, ...
* +Series(7)+ -> starting at 0 with an increment of 7 -> 7, 14, 21, 28, ...
* +Series(7, 2)+ -> starting at 7 with an increment of 2 -> 9, 11, 13, 15, ...
* +Series(2, 7)+ -> starting at 2 with an increment of 7 -> 9, 16, 23, 30, ...

Nexus's Series Objects provide the following methods:

* +reset()+ to set the object back to its original values when created
* +next()+ to increment and return the next number in the series
* +value()+ to return the current value without incrementing internal state

I use +s1+ a lot in my daily vimming. It could be useful to you too.

Other generators
~~~~~~~~~~~~~~~~

Other generators can be written for Nexus and passed to +Series()+ as
a string in the first argument:

  :let fib = Series('Fibonacci')

Will create a Series object called +fib+ that generates the Fibonacci
sequence on each subsequent +.next()+ call. This generator and object
exist by default in the Nexus plugin. They are not expected to be
useful in themselves but rather serve to demonstrate how user-created
generators can be used with Nexus. Consult the code in
+plugin/nexus.vim+ to learn how to craft your generator. If you _do_
find a use for the Fibonacci sequence in your Vim life, I would love
to hear about it.  :-)

